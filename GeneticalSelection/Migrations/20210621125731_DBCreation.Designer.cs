// <auto-generated />
using GeneticalSelection.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeneticalSelection.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210621125731_DBCreation")]
    partial class DBCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ClassId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SubphylumId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubphylumId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FamilyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Genus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("GenusId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Genuses");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Kingdom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("KingdomId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Kingdoms");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OrderId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Phylum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PhylumId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("KingdomId")
                        .HasColumnType("bigint");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("KingdomId");

                    b.ToTable("Phylums");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Species", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SpeciesId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("GenusId")
                        .HasColumnType("bigint");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Subphylum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SubphylumId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PhylumId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PhylumId");

                    b.ToTable("Subphylums");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Class", b =>
                {
                    b.HasOne("GeneticalSelection.Models.Entities.Subphylum", "Subphylum")
                        .WithMany("Classes")
                        .HasForeignKey("SubphylumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subphylum");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Family", b =>
                {
                    b.HasOne("GeneticalSelection.Models.Entities.Order", "Order")
                        .WithMany("Families")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Genus", b =>
                {
                    b.HasOne("GeneticalSelection.Models.Entities.Family", "Family")
                        .WithMany("Genuses")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Order", b =>
                {
                    b.HasOne("GeneticalSelection.Models.Entities.Class", "Class")
                        .WithMany("Orders")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Phylum", b =>
                {
                    b.HasOne("GeneticalSelection.Models.Entities.Kingdom", "Kingdom")
                        .WithMany("Phylums")
                        .HasForeignKey("KingdomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Species", b =>
                {
                    b.HasOne("GeneticalSelection.Models.Entities.Genus", "Genus")
                        .WithMany("Species")
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genus");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Subphylum", b =>
                {
                    b.HasOne("GeneticalSelection.Models.Entities.Phylum", "Phylum")
                        .WithMany("Subphylums")
                        .HasForeignKey("PhylumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phylum");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Class", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Family", b =>
                {
                    b.Navigation("Genuses");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Genus", b =>
                {
                    b.Navigation("Species");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Kingdom", b =>
                {
                    b.Navigation("Phylums");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Order", b =>
                {
                    b.Navigation("Families");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Phylum", b =>
                {
                    b.Navigation("Subphylums");
                });

            modelBuilder.Entity("GeneticalSelection.Models.Entities.Subphylum", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
